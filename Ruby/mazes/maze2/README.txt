+ ================ +
+ BINARY TREE MAZE +
+ ================ +

This script implements a simple binary tree algorithm to draw simple ASCII mazes.

 - Start in the upper-left cell of the maze. 
 - Randomly carve either towards the east or south. 

and that's it!

This algorithm is fast, and has the ability to generate a perfect maze without maintaining any state at all:  it can generate the entire maze by looking only at one cell at a time. This in turn makes the maze easily amenable to "animation", which in this script can be activated by using the "-a" switch. However, some drawbacks include: (1) two of the four sides (in this implementation, the north and west sides) will be spanned by a single corridor; and (2) despite the "randomization", the algorithm will tend to produce a strong "diagonal" bias, in this case running from the northwest to the southeast.

An interesting side-effect is that this algorithm produces a maze which is, in point of fact, a binary tree: the "root" node being (in this implementation) the top-left (i.e., northwest) corner. Every other cell in the grid has only one "parent" to the north or west, and either zero, one or at most two "children" to the south and east.

A fun way to extend this project would be to produce a representation of the binary tree graph generated by the algorithm. 

Sample maze:
 ___________________
|  ___   _   _   _  |
|     |   |___|   | |
| |_| |_|_____| | |_|
|   |  _______|_|  _|
| |_|  _     ___|  _|
|   |   |_|  _  |   |
| |_| |_  |_  |_|_|_|
|  _|___|  _|_   ___|
|  _   _|  _  |     |
|___|___|___|_|_|_|_|

+ ================== +
+ RUNNING THE SCRIPT +
+ ================== +

Run the maze with default settings:
> ./maze.rb

Run the maze with custom width and height:
> ./maze.rb -w20 -h25

Run the maze with a preset seed, to model deterministic behavior:
> ./maze.rb -s100

Run the maze in animation mode (<-- COOL):
> ./maze.rb -a

Run the maze with a custom animation delay:
> ./maze.rb -a -d0.1
